{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Layout/home/CreateDeckButton.js","Layout/home/ViewDeckButton.js","Layout/home/StudyDeckButton.js","Layout/home/DeleteDeckButton.js","Layout/home/Home.js","Layout/decks-study/StudyScreenBreadcrumbNavBar.js","Layout/decks-study/FlipButton.js","Layout/decks-study/NextButton.js","Layout/decks-study/AddCardsButton.js","Layout/decks-study/StudyCard.js","Layout/decks-study/Study.js","Layout/decks-new/CreateDeckBreadcrumbNavBar.js","Layout/decks-new/CreateDeckCancelButton.js","Layout/decks-new/CreateDeckScreen.js","Layout/decks/DeckScreenBreadcrumbNavBar.js","Layout/decks/DeckScreenDeleteDeckButton.js","Layout/decks/DeckScreenCard.js","Layout/decks/DeckInfo.js","Layout/decks/DeckScreen.js","Layout/decks-edit/EditDeckScreenBreadcrumbNavBar.js","Layout/decks-edit/EditDeckCancelButton.js","Layout/decks-edit/EditDeckScreen.js","Layout/decks-cards/new/AddCardScreenBreadcrumbNavBar.js","Layout/decks-cards/CardForm.js","Layout/decks-cards/new/AddCardDoneButton.js","Layout/decks-cards/new/AddCardScreen.js","Layout/decks-cards/edit/EditCardScreenBreadcrumbNavBar.js","Layout/decks-cards/edit/EditCardCancelButton.js","Layout/decks-cards/edit/EditCardScreen.js","Layout/NotFound.js","Layout/Layout.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","append","CreateDeckButton","history","useHistory","type","onClick","push","ViewDeckButton","StudyDeckButton","DeleteDeckButton","window","confirm","href","Home","useState","decks","setDecks","useEffect","decksFromAPI","loadDecks","map","index","length","description","StudyScreenBreadcrumbNavBar","to","FlipButton","setIsFrontOfCard","currentSide","NextButton","NextCardHandler","AddCardsButton","StudyCard","currentCard","setCurrentCard","cardCount","setCardCount","isFrontOfCard","useRouteMatch","front","back","currentCount","Study","setDeck","setCards","useParams","deckFromAPI","loadDeck","CreateDeckBreadcrumbNavBar","CreateDeckCancelButton","CreateDeckScreen","deckName","setDeckName","deckDescription","setDeckDescription","onSubmit","event","preventDefault","createDeck","then","newDeck","htmlFor","placeholder","onChange","target","value","rows","DeckScreenBreadcrumbNavBar","DeckScreenDeleteDeckButton","DeckScreenCard","handleDeleteCardClick","deleteCard","cardDisplay","DeckInfo","DeckScreen","path","EditDeckScreenBreadcrumbNavBar","EditDeckCancelButton","EditDeckScreen","updateDeck","AddCardScreenBreadcrumbNavBar","CardForm","cardFront","handleCardFrontChange","cardBack","handleCardBackChange","AddCardDoneButton","AddCardScreen","setCardFront","setCardBack","createCard","EditCardScreenBreadcrumbNavBar","EditCardCancelButton","EditCardScreen","preExistingCard","setPreExistingCard","cardFromAPI","loadCard","updateCard","NotFound","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80764200.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron bg-transparent\">\r\n      <div className=\"container text-black\">\r\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\r\n        <p className=\"lead font-italic ml-1\">Discover the flashcard difference.</p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  default value returned if the fetch is cancelled.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\n\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    return await response.json();\r\n\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, {});\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, updatedDeck);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, card);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options, updatedCard);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction CreateDeckButton() {\r\n  const history = useHistory();\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-success mb-3 btn-lg\"\r\n      onClick={() => history.push(\"/decks/new\")}\r\n    >\r\n      <span className=\"oi oi-plus\" /> Create Deck\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CreateDeckButton;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ViewDeckButton({ deck }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-dark mr-2\"\r\n      onClick={() => history.push(`/decks/${deck.id}`)}\r\n    >\r\n      <span className=\"oi oi-eye\" /> View\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ViewDeckButton;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction StudyDeckButton({ deck }) {\r\n  const history = useHistory();\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-primary mr-2\"\r\n      onClick={() => history.push(`/decks/${deck.id}/study`)}\r\n    >\r\n      <span className=\"oi oi-book\" /> Study\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default StudyDeckButton;\r\n","import React from \"react\";\r\nimport { deleteDeck } from \"../../utils/api/index\";\r\n\r\nfunction DeleteDeckButton({ deck }) {\r\n  // When the user clicks the \"Delete\" button, the warning message below is shown.\r\n  // If the user clicks \"OK\", the deck is deleted and the will no longer be visible\r\n  // on the Home screen\r\n  const handleTrashClick = () => {\r\n    if (\r\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\r\n    ) {\r\n      deleteDeck(deck.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" className=\"btn btn-danger\" onClick={handleTrashClick}>\r\n      {/* Using the anchor element to trigger the home page to refresh after deleting \r\n      the deck. This causes the deleted deck to no longer be displayed on the Home screen */}\r\n      <a href=\"/\" className=\"text-white\">\r\n        <span className=\"oi oi-trash\" />\r\n      </a>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default DeleteDeckButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { listDecks } from \"../../utils/api/index\";\r\nimport \"./Home.css\";\r\n\r\nimport CreateDeckButton from \"./CreateDeckButton\";\r\nimport ViewDeckButton from \"./ViewDeckButton\";\r\nimport StudyDeckButton from \"./StudyDeckButton\";\r\nimport DeleteDeckButton from \"./DeleteDeckButton\";\r\n\r\nfunction Home() {\r\n  const [decks, setDecks] = useState([]);\r\n\r\n  // Loading all of the decks from the API\r\n  useEffect(() => {\r\n    async function loadDecks() {\r\n      const response = listDecks();\r\n      const decksFromAPI = await response;\r\n      setDecks(decksFromAPI);\r\n    }\r\n    loadDecks();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <CreateDeckButton />\r\n\r\n      {/* Creating a Bootstrap card for each deck and the associated buttons */}\r\n      {decks.map((deck, index) => {\r\n        return (\r\n          <div className=\"deck-card card mt-2\" key={index}>\r\n            <div className=\"card-body\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <h5 className=\"card-title font-weight-bold\">{deck.name}</h5>\r\n                <h6 className=\"card-subtitle text-muted\">\r\n                  {deck.cards.length} cards\r\n                </h6>\r\n              </div>\r\n              <p className=\"card-text\">{deck.description}</p>\r\n              <div className=\"d-flex\">\r\n                <div className=\"mr-auto\">\r\n                  <ViewDeckButton deck={deck} />\r\n                  <StudyDeckButton deck={deck} />\r\n                </div>\r\n                <div>\r\n                  <DeleteDeckButton deck={deck} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction StudyScreenBreadcrumbNavBar({ deckId, deck }) {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          Study\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default StudyScreenBreadcrumbNavBar;\r\n","import React from \"react\";\r\n\r\nfunction FlipButton({ setIsFrontOfCard }) {\r\n  const flipCardHandler = () => {\r\n    setIsFrontOfCard((currentSide) => !currentSide);\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" className=\"btn btn-dark mr-2\" onClick={flipCardHandler}>\r\n      Flip\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FlipButton;\r\n","import React from \"react\";\r\n\r\nfunction NextButton({ NextCardHandler }) {\r\n  return (\r\n    <button type=\"button\" className=\"btn btn-success\" onClick={NextCardHandler}>\r\n      Next\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default NextButton;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction AddCardsButton({ deckId }) {\r\n  const history = useHistory();\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-success\"\r\n      onClick={() => history.push(`/decks/${deckId}/cards/new`)}\r\n    >\r\n      <span className=\"oi oi-plus\" /> Add Cards\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default AddCardsButton;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useRouteMatch } from \"react-router\";\r\n\r\nimport FlipButton from \"./FlipButton\";\r\nimport NextButton from \"./NextButton\";\r\nimport AddCardsButton from \"./AddCardsButton\";\r\n\r\nfunction StudyCard({ cards, currentCard, setCurrentCard, deckId }) {\r\n  const [cardCount, setCardCount] = useState(1);\r\n  const [isFrontOfCard, setIsFrontOfCard] = useState(true);\r\n\r\n  const history = useHistory();\r\n  const { url } = useRouteMatch();\r\n\r\n  // Function to handle clicks of the Next button\r\n  const NextCardHandler = () => {\r\n    // Keeping track of which card in the deck the user is currently viewing\r\n    if (cardCount < cards.length) {\r\n      setIsFrontOfCard((currentSide) => !currentSide);\r\n      setCurrentCard(cards[cardCount]);\r\n      setCardCount((currentCount) => currentCount + 1);\r\n    } else {\r\n      // Once the user has reached the final card in the deck, they will be prompted to either restart\r\n      // the deck of cards, or return to the home page\r\n      if (\r\n        window.confirm(\r\n          \"Restart cards? Click 'cancel' to return to the home page.\"\r\n        )\r\n      ) {\r\n        setIsFrontOfCard((currentSide) => !currentSide);\r\n        setCurrentCard(cards[0]);\r\n        setCardCount(1);\r\n        history.push(url);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // If there are less than 3 cards in a deck, the user will be prompted to add cards to the deck\r\n  if (cards.length < 3) {\r\n    return (\r\n      <div>\r\n        <h4 className=\"text-danger font-weight-bold\">Not enough cards!</h4>\r\n        <p>\r\n          You need at least 3 cards to study. There are {cards.length} cards in\r\n          this deck.\r\n        </p>\r\n        <AddCardsButton deckId={deckId} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Renders the front of the card and the \"Flip\" button if isFrontOfCard is true\r\n  if (isFrontOfCard) {\r\n    return (\r\n      <div className=\"deck-card card\">\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            Card {cardCount} of {cards.length}\r\n          </h5>\r\n          <p className=\"font-weight-bold font-italic mb-0\">Front:</p>\r\n          <p className=\"card-text\">{currentCard.front}</p>\r\n          <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Renders the back of the card and the \"Flip\" and \"Next\" buttons if isFrontOfCard is false\r\n  return (\r\n    <div className=\"deck-card card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          Card {cardCount} of {cards.length}\r\n        </h5>\r\n        <p className=\"font-weight-bold font-italic mb-0\">Back:</p>\r\n        <p className=\"card-text\">{currentCard.back}</p>\r\n        <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\r\n        <NextButton NextCardHandler={NextCardHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StudyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport StudyScreenBreadcrumbNavBar from \"./StudyScreenBreadcrumbNavBar\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nfunction Study() {\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([]);\r\n  const [currentCard, setCurrentCard] = useState({});\r\n  const deckId = useParams().deckId;\r\n\r\n  // Loading the specified deck from the API\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const response = readDeck(deckId);\r\n      const deckFromAPI = await response;\r\n      setDeck(deckFromAPI);\r\n      setCards(deckFromAPI.cards);\r\n      setCurrentCard(deckFromAPI.cards[0]);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  return (\r\n    <div>\r\n      <StudyScreenBreadcrumbNavBar deckId={deckId} deck={deck}/>\r\n      <h2 className=\"mb-4\">Study: {deck.name}</h2>\r\n      <StudyCard cards={cards} currentCard={currentCard} setCurrentCard={setCurrentCard} deckId={deckId}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Study;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction CreateDeckBreadcrumbNavBar() {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          Create Deck\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default CreateDeckBreadcrumbNavBar;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction CreateDeckCancelButton() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-dark mr-2\"\r\n      onClick={() => history.push(\"/\")}\r\n    >\r\n      Cancel\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CreateDeckCancelButton;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../../utils/api/index\";\r\n\r\nimport CreateDeckBreadcrumbNavBar from \"./CreateDeckBreadcrumbNavBar\";\r\nimport CreateDeckCancelButton from \"./CreateDeckCancelButton\";\r\n\r\nfunction CreateDeckScreen() {\r\n  const [deckName, setDeckName] = useState(\"\");\r\n  const [deckDescription, setDeckDescription] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  // Handling changes to the deck's name and description in the form\r\n  const handleDeckNameChange = (event) => setDeckName(event.target.value);\r\n  const handleDeckDescriptionChange = (event) =>\r\n    setDeckDescription(event.target.value);\r\n\r\n  // Adding new deck to the database. Saved deck will have an \"id\" property\r\n  // Clicking submit will then take the user to that deck's screen\r\n  const handleCreateDeckSubmit = (event) => {\r\n    event.preventDefault();\r\n    createDeck({\r\n      name: deckName,\r\n      description: deckDescription,\r\n    }).then((newDeck) => history.push(`/decks/${newDeck.id}`));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CreateDeckBreadcrumbNavBar />\r\n      <h2>Create Deck</h2>\r\n      <form onSubmit={handleCreateDeckSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"deckName\">Name</label>\r\n          <input\r\n            id=\"deckName\"\r\n            type=\"text\"\r\n            name=\"deckName\"\r\n            className=\"form-control\"\r\n            placeholder=\"Deck Name\"\r\n            onChange={handleDeckNameChange}\r\n            value={deckName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"deckDescription\">Description</label>\r\n          <textarea\r\n            id=\"deckDescription\"\r\n            name=\"deckDescription\"\r\n            className=\"form-control\"\r\n            placeholder=\"Brief description of the deck\"\r\n            rows=\"5\"\r\n            onChange={handleDeckDescriptionChange}\r\n            value={deckDescription}\r\n          />\r\n        </div>\r\n        <CreateDeckCancelButton />\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateDeckScreen;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction DeckScreenBreadcrumbNavBar({ deckName }) {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          {deckName}\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default DeckScreenBreadcrumbNavBar;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../../utils/api/index\";\r\n\r\nfunction DeckScreenDeleteDeckButton({ deckId }) {\r\n  const history = useHistory();\r\n  \r\n  /* When the user clicks on the \"Delete\" button associated with a particular deck, they\r\n  will be given the warning message below. If the user clicks \"OK\", the deck is deleted\r\n  and is no longer visible on the Home screen */\r\n  const handleTrashClick = () => {\r\n    if (\r\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\r\n    ) {\r\n      deleteDeck(deckId).then(() => history.push(\"/\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" className=\"btn btn-danger\" onClick={handleTrashClick}>\r\n      <span className=\"oi oi-trash\" />\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default DeckScreenDeleteDeckButton;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteCard } from \"../../utils/api/index\";\r\n\r\nfunction DeckScreenCard({ cards, deckId, url }) {\r\n  const history = useHistory();\r\n\r\n  /* When the user clicks the \"Delete\" button associated with a card, this warning message will show.\r\n  If the user clicks \"OK\", the card is deleted using deleteCard() */\r\n  const handleDeleteCardClick = (card) => {\r\n    if (\r\n      window.confirm(\"Delete this card? You will not be able to recover it.\")\r\n    ) {\r\n      deleteCard(card.id);\r\n    } \r\n  };\r\n\r\n  // Creates a Bootstrap card for each card in the deck with an edit and delete button\r\n  const cardDisplay = cards.map((card, index) => {\r\n    return (\r\n      <div className=\"deck-card card mt-2\" key={index}>\r\n        <div className=\"card-body row\">\r\n          <div className=\"col-md-5 pl-3\">\r\n            <p className=\"font-weight-bold\">Front:</p>\r\n            <p className=\"card-text \">{card.front}</p>\r\n          </div>\r\n          <div className=\"col-md-5 ml-auto\">\r\n            <p className=\"font-weight-bold\">Back:</p>\r\n            <p className=\"card-text\">{card.back}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <hr />\r\n        \r\n        <div className=\"ml-auto mt-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark mr-2\"\r\n            onClick={() =>\r\n              history.push(`/decks/${deckId}/cards/${card.id}/edit`)\r\n            }\r\n          >\r\n            <span className=\"oi oi-pencil\" /> Edit\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={() => handleDeleteCardClick(card)}\r\n          >\r\n            {/* The anchor element will trigger the page to refresh after the card has been deleted.\r\n            This makes it so that the refreshed page will no longer display the deleted card. */}\r\n            <a href={url} className=\"text-white\">\r\n              <span className=\"oi oi-trash\" />\r\n            </a>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  // If there are cards in this deck, they will render. If not, the following message will return instead.\r\n  if (cards.length) {\r\n    return <div>{cardDisplay}</div>;\r\n  } else {\r\n    return \"There are no cards in this deck yet!\";\r\n  }\r\n}\r\n\r\nexport default DeckScreenCard;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DeckScreenDeleteDeckButton from \"./DeckScreenDeleteDeckButton\";\r\nimport DeckScreenCard from \"./DeckScreenCard\";\r\n\r\n// This component displays all of a specific deck's info and the buttons used to interact with the deck\r\nfunction DeckInfo({ deckName, deckDescription, deckId, cards, url }) {\r\n    const history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n      <h2>{deckName}</h2>\r\n      <p>{deckDescription}</p>\r\n      <div className=\"d-flex mb-4\">\r\n        <div className=\"mr-auto\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-dark mr-2\"\r\n            onClick={() => history.push(`/decks/${deckId}/edit`)}\r\n          >\r\n            <span className=\"oi oi-pencil\" /> Edit\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary mr-2\"\r\n            onClick={() => history.push(`/decks/${deckId}/study`)}\r\n          >\r\n            <span className=\"oi oi-book\" /> Study\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            onClick={() => history.push(`/decks/${deckId}/cards/new`)}\r\n          >\r\n            <span className=\"oi oi-plus\" /> Add Cards\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <DeckScreenDeleteDeckButton deckId={deckId} />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Cards</h3>\r\n        {/* Renders the cards in the deck and the edit card and delete card buttons */}\r\n        <DeckScreenCard cards={cards} deckId={deckId} url={url} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckInfo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Route, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\n\r\nimport DeckScreenBreadcrumbNavBar from \"./DeckScreenBreadcrumbNavBar\";\r\nimport DeckInfo from \"./DeckInfo\";\r\n\r\nfunction DeckScreen() {\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([]);\r\n\r\n  const deckId = useParams().deckId;\r\n  const { url } = useRouteMatch();\r\n\r\n  // loading the specified deck from the API\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const response = readDeck(deckId);\r\n      const deckFromAPI = await response;\r\n      setDeck(deckFromAPI);\r\n      setCards(deckFromAPI.cards);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  // If the deck has been fetched from the API, the breadcrumb nav bar and deck info will display\r\n  if (deck.name) {\r\n    return (\r\n      <div>\r\n        <DeckScreenBreadcrumbNavBar deckName={deck.name} />\r\n        <Route path={url}>\r\n          <DeckInfo\r\n            deckName={deck.name}\r\n            deckDescription={deck.description}\r\n            deckId={deckId}\r\n            cards={cards}\r\n            url={url}\r\n          />\r\n        </Route>\r\n      </div>\r\n    );\r\n  }\r\n  return \"Loading...\";\r\n}\r\n\r\nexport default DeckScreen;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EditDeckScreenBreadcrumbNavBar({ deckName, deckId }) {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to={`/decks/${deckId}`}>{deckName}</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          Edit Deck\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default EditDeckScreenBreadcrumbNavBar;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction EditDeckCancelButton({ deckId }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-dark mr-2\"\r\n      onClick={() => history.push(`/decks/${deckId}`)}\r\n    >\r\n      Cancel\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default EditDeckCancelButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\r\n\r\nimport EditDeckScreenBreadcrumbNavBar from \"./EditDeckScreenBreadcrumbNavBar\";\r\nimport EditDeckCancelButton from \"./EditDeckCancelButton\";\r\n\r\nfunction EditDeckScreen() {\r\n  const [deckName, setDeckName] = useState(\"\");\r\n  const [deckDescription, setDeckDescription] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n  const deckId = useParams().deckId;\r\n\r\n  // loading the specified deck from the API\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const response = readDeck(deckId);\r\n      const deckFromAPI = await response;\r\n      setDeckName(deckFromAPI.name);\r\n      setDeckDescription(deckFromAPI.description);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  // Handling changes to the deck name and deck description in the form\r\n  const handleDeckNameChange = (event) => setDeckName(event.target.value);\r\n  const handleDeckDescriptionChange = (event) =>\r\n    setDeckDescription(event.target.value);\r\n\r\n  // Updating the pre-existing deck with the changes to the deck name and description\r\n  // Clicking submit will take the user to that deck's screen\r\n  const handleEditDeckSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateDeck({\r\n      id: deckId,\r\n      name: deckName,\r\n      description: deckDescription,\r\n    }).then((updatedDeck) => history.push(`/decks/${updatedDeck.id}`));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <EditDeckScreenBreadcrumbNavBar deckName={deckName} deckId={deckId} />\r\n      <h2>Edit Deck</h2>\r\n      <form onSubmit={handleEditDeckSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"deckName\">Name</label>\r\n          <input\r\n            id=\"deckName\"\r\n            type=\"text\"\r\n            name=\"deckName\"\r\n            className=\"form-control\"\r\n            onChange={handleDeckNameChange}\r\n            value={deckName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"deckDescription\">Description</label>\r\n          <textarea\r\n            id=\"deckDescription\"\r\n            name=\"deckDescription\"\r\n            className=\"form-control\"\r\n            rows=\"5\"\r\n            onChange={handleDeckDescriptionChange}\r\n            value={deckDescription}\r\n          />\r\n        </div>\r\n        <EditDeckCancelButton deckId={deckId} />\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditDeckScreen;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction AddCardScreenBreadcrumbNavBar({ deckName, deckId }) {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item\">\r\n            <Link to={`/decks/${deckId}`}>{deckName}</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          Add Card\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default AddCardScreenBreadcrumbNavBar;\r\n","import React from \"react\";\r\n\r\n// Component to be used in both the Add Card and Edit Card Screens\r\n\r\nfunction CardForm({ cardFront, handleCardFrontChange, cardBack, handleCardBackChange }) {\r\n  return (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"cardFront\">Front</label>\r\n        <textarea\r\n          id=\"cardFront\"\r\n          name=\"cardFront\"\r\n          className=\"form-control\"\r\n          placeholder=\"Front side of card\"\r\n          rows=\"3\"\r\n          onChange={handleCardFrontChange}\r\n          value={cardFront}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"cardBack\">Back</label>\r\n        <textarea\r\n          id=\"cardBack\"\r\n          name=\"cardBack\"\r\n          className=\"form-control\"\r\n          placeholder=\"Back side of card\"\r\n          rows=\"3\"\r\n          onChange={handleCardBackChange}\r\n          value={cardBack}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardForm;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction AddCardDoneButton({ deckId }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-dark mr-2\"\r\n      onClick={() => history.push(`/decks/${deckId}`)}\r\n    >\r\n      Done\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default AddCardDoneButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck, createCard } from \"../../../utils/api/index\";\r\n\r\nimport AddCardScreenBreadcrumbNavBar from \"./AddCardScreenBreadcrumbNavBar\";\r\nimport CardForm from \"../CardForm\";\r\nimport AddCardDoneButton from \"./AddCardDoneButton\";\r\n\r\nfunction AddCardScreen() {\r\n  const [deck, setDeck] = useState({});\r\n  const [cardFront, setCardFront] = useState(\"\");\r\n  const [cardBack, setCardBack] = useState(\"\");\r\n  const deckId = useParams().deckId;\r\n\r\n  // Loading the deck from the API\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const response = readDeck(deckId);\r\n      const deckFromAPI = await response;\r\n      setDeck(deckFromAPI);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  // Handling changes to the card front and card back from the form\r\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\r\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\r\n\r\n  // When the user clicks on the \"Save\" button, the new card will be created using createCard()\r\n  // The textarea for the card front and back will be cleared and the process for adding a\r\n  // card is restarted.\r\n  const handleAddCardSave = (event) => {\r\n    event.preventDefault();\r\n    createCard(deckId, { front: cardFront, back: cardBack });\r\n    setCardFront(\"\");\r\n    setCardBack(\"\");\r\n  };\r\n\r\n  // If the deck was properly fetched from the API, the following will render properly.\r\n  // Otherwise, \"Loading...\" will display\r\n  if (deck.name) {\r\n    return (\r\n      <div>\r\n        <AddCardScreenBreadcrumbNavBar deckName={deck.name} deckId={deckId} />\r\n        <h2>{deck.name}: Add Card</h2>\r\n        <form onSubmit={handleAddCardSave}>\r\n          <CardForm\r\n            cardFront={cardFront}\r\n            handleCardFrontChange={handleCardFrontChange}\r\n            cardBack={cardBack}\r\n            handleCardBackChange={handleCardBackChange}\r\n          />\r\n          <AddCardDoneButton deckId={deckId} />\r\n          <button type=\"submit\" className=\"btn btn-success\">\r\n            Save\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  return \"Loading...\";\r\n}\r\n\r\nexport default AddCardScreen;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EditCardScreenBreadcrumbNavBar({ deckName, deckId, cardId }) {\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to=\"/\">\r\n            <span className=\"oi oi-home\" />\r\n            Home\r\n          </Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item\">\r\n          <Link to={`/decks/${deckId}`}>Deck: {deckName}</Link>\r\n        </li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n          Edit Card {cardId}\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default EditCardScreenBreadcrumbNavBar;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction EditCardCancelButton({ deckId }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-dark mr-2\"\r\n      onClick={() => history.push(`/decks/${deckId}`)}\r\n    >\r\n      Cancel\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default EditCardCancelButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, readCard, updateCard } from \"../../../utils/api/index\";\r\n\r\nimport EditCardScreenBreadcrumbNavBar from \"./EditCardScreenBreadcrumbNavBar\";\r\nimport CardForm from \"../CardForm\";\r\nimport EditCardCancelButton from \"./EditCardCancelButton\";\r\n\r\nfunction EditCardScreen() {\r\n  const [deck, setDeck] = useState({});\r\n  const [preExistingCard, setPreExistingCard] = useState({});\r\n  const [cardFront, setCardFront] = useState(\"\");\r\n  const [cardBack, setCardBack] = useState(\"\");\r\n\r\n  const deckId = useParams().deckId;\r\n  const cardId = useParams().cardId;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // function to load the deck from the API\r\n    async function loadDeck() {\r\n      const response = readDeck(deckId);\r\n      const deckFromAPI = await response;\r\n      setDeck(deckFromAPI);\r\n    }\r\n\r\n    // function to load the card from the API\r\n    async function loadCard() {\r\n      const response = readCard(cardId);\r\n      const cardFromAPI = await response;\r\n      setPreExistingCard(cardFromAPI);\r\n      setCardFront(cardFromAPI.front);\r\n      setCardBack(cardFromAPI.back);\r\n    }\r\n    loadDeck();\r\n    loadCard();\r\n  }, [deckId, cardId]);\r\n\r\n  // handling form changes\r\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\r\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\r\n\r\n  // Updating the card with the changes to the front and back of the card\r\n  // Clicking submit will also then take the user back to that deck's screen\r\n  const handleEditCardSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateCard({ ...preExistingCard, front: cardFront, back: cardBack })\r\n      .then((updatedCard) => history.push(`/decks/${updatedCard.deckId}`));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <EditCardScreenBreadcrumbNavBar\r\n        deckName={deck.name}\r\n        deckId={deckId}\r\n        cardId={cardId}\r\n      />\r\n      <h2>Edit Card</h2>\r\n      <form onSubmit={handleEditCardSubmit}>\r\n        <CardForm\r\n          cardFront={cardFront}\r\n          handleCardFrontChange={handleCardFrontChange}\r\n          cardBack={cardBack}\r\n          handleCardBackChange={handleCardBackChange}\r\n        />\r\n        <EditCardCancelButton deckId={deckId} />\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditCardScreen;\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./Layout.css\";\r\n\r\nimport Header from \"./Header\";\r\nimport Home from \"./home/Home\";\r\nimport Study from \"./decks-study/Study\";\r\nimport CreateDeckScreen from \"./decks-new/CreateDeckScreen\";\r\nimport DeckScreen from \"./decks/DeckScreen\";\r\nimport EditDeckScreen from \"./decks-edit/EditDeckScreen\";\r\nimport AddCardScreen from \"./decks-cards/new/AddCardScreen\";\r\nimport EditCardScreen from \"./decks-cards/edit/EditCardScreen\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nfunction Layout() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container card\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/new\">\r\n            <CreateDeckScreen />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/:deckId/cards/new\">\r\n            <AddCardScreen />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n            <EditCardScreen />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/:deckId/edit\">\r\n            <EditDeckScreen />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/:deckId/study\">\r\n            <Study />\r\n          </Route>\r\n\r\n          <Route path=\"/decks/:deckId\">\r\n            <DeckScreen />\r\n          </Route>\r\n\r\n          <Route>\r\n            <NotFound />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./Layout/Layout\";\r\nimport \"./App.css\";\r\n\r\n/**\r\n * App is a wrapper for <Layout>, you should not need to change this file.\r\n */\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-routes app-background\">\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Layout />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}